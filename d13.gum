import aoc
import math

button_prelude = "Button A: X+"
prize_prelude = "Prize: X="

class ButtonOrPrize:
    init(input, prelude, offset):
        i = input.find(",")
        self.x = int(input[prelude.len()...i]) + offset
        self.y = int(input[(i+4)...input.len()]) + offset

class Machine:
    init(input, offset):
        lines = input.split("\r\n")
        self.a = ButtonOrPrize(lines[0], button_prelude, 0)
        self.b = ButtonOrPrize(lines[1], button_prelude, 0)
        self.p = ButtonOrPrize(lines[2], prize_prelude, offset)

fn solve(input, offset):
    tokens = 0
    for machine_input in input.split("\r\n\r\n"):
        m = Machine(machine_input, offset)
        a = (m.p.y * m.b.x - m.p.x * m.b.y) / (m.a.y * m.b.x - m.a.x * m.b.y)
        if math.trunc(a) != a: continue
        b = (m.p.x - m.a.x * a) / m.b.x
        if math.trunc(b) != b: continue
        tokens += a * 3 + b
    return tokens

export fn part1(input):
    return solve(input, 0)

export fn part2(input):
    return solve(input, 10000000000000)

if is_main():
    aoc.solve(13, part1, part2)
