import aoc
import math
import pathfind for bfs

export fallen = 1024
export size = 70

class Space:
    init(input):
        self.corrupted = {}
        self.bytes = []
        self.last = nil
        lines = input.split("\r\n")
        for i in (lines.num() - 1)..0:
            parts = lines[i].split(",")
            x = int(parts[0])
            y = int(parts[1])
            self.bytes.add((x, y))

    fn tick(n):
        while n > 0:
            self.last = self.bytes.pop()
            self.corrupted.add(self.last, nil)
            n -= 1

class Node:
    init(space, pos):
        self.space = space
        self.pos = pos

    fn get_neighbors():
        neighbors = []
        fn add_if_valid(pos):
            if pos in self.space.corrupted:
                return
            neighbors.add(Node(self.space, pos))
        x = self.pos[0]
        y = self.pos[1]
        if x > 0: add_if_valid((x - 1, y))
        if y > 0: add_if_valid((x, y - 1))
        if x < size: add_if_valid((x + 1, y))
        if y < size: add_if_valid((x, y + 1))
        return neighbors
    
    fn dist(neighbor):
        return 1

    fn key():
        return self.pos

export fn part1(input):
    space = Space(input)
    space.tick(fallen)
    result = bfs(Node(space, (0, 0)))
    return result.dist[(size, size)]

export fn part2(input):
    goal = (size, size)
    space = Space(input)
    lo = fallen
    hi = space.bytes.num()
    while lo != hi:
        mid = math.trunc((lo + hi)/2)
        space = Space(input)
        space.tick(mid)
        result = bfs(Node(space, (0, 0)))
        if goal in result.dist:
            lo = mid + 1
        else:
            hi = mid
    return "{space.last[0]},{space.last[1]}"

if is_main():
    aoc.solve(18, part1, part2)
