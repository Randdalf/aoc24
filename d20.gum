import aoc
import math for abs, is_even

export saving_target = 100

class Racetrack:
    init(input):
        rows = input.split("\r\n")
        self.height = rows.num()
        self.width = rows[0].len()
        self.walls = {}
        for y in 0...self.height:
            row = rows[y]
            for x in 0...self.width:
                tile = row[x]
                if tile == "#":
                    self.walls.add((x, y), nil)
                elif tile == "S":
                    self.start = (x, y)
                elif tile == "E":
                    self.end = (x, y)

fn move_right(pos):
    return (pos[0] + 1, pos[1])

fn move_down(pos):
    return (pos[0], pos[1] + 1)

fn move_left(pos):
    return (pos[0] - 1, pos[1])

fn move_up(pos):
    return (pos[0], pos[1] - 1)

fn inside_track(track, pos):
    if pos[0] < 0 or pos[0] >= track.width:
        return false
    if pos[1] < 0 or pos[1] >= track.height:
        return false
    return true

fn traverse(track):
    visited = {}
    dists = {}

    fn can_traverse(track, pos):
        if pos in track.walls:
            return false
        if pos in visited:
            return false
        return inside_track(track, pos)

    pos = track.start
    dist = 0
    while pos != nil:
        # Interpreter bug: if we query dists in can_traverse, when iterating
        # over it later, the value of particular keys cannot be found. Using
        # a separate dict works around this.
        visited.add(pos, nil)
        dists.add(pos, dist)
        dist += 1

        right = move_right(pos)
        down = move_down(pos)
        left = move_left(pos)
        up = move_up(pos)

        if can_traverse(track, right):
            pos = right
        elif can_traverse(track, down):
            pos = down
        elif can_traverse(track, left):
            pos = left
        elif can_traverse(track, up):
            pos = up
        else:
            pos = nil

    return dists

fn manhattan(a, b):
    return abs(b[0] - a[0]) + abs(b[1] - a[1])

fn solve(input, ps):
    track = Racetrack(input)
    dists = traverse(track)
    good_cheats = 0
    for start in dists:
        cheats = []
        for pos in dists:
            if manhattan(start, pos) <= ps: # TODO: can only land on squares which are odd/even depending on ps
                if dists[pos] - dists[start] - ps >= saving_target:
                    good_cheats += 1
    return good_cheats

export fn part1(input):
    return solve(input, 2)

export fn part2(input):
    return solve(input, 20)

if is_main():
    import io for read_file_text
    aoc.solve(20, part1, part2)
