import aoc
import math
import pathfind for bfs

xform_cw = [1, 2, 3, 0]
xform_ccw = [3, 0, 1, 2]

fn xform_east(pos):
    return (pos[0] + 1, pos[1])

fn xform_south(pos):
    return (pos[0], pos[1] + 1)

fn xform_west(pos):
    return (pos[0] - 1, pos[1])

fn xform_north(pos):
    return (pos[0], pos[1] - 1)

move_xforms = [xform_east, xform_south, xform_west, xform_north]

class Maze:
    init(input):
        rows = input.split("\r\n")
        self.walls = {}
        for y in 0...rows.num():
            row = rows[y]
            for x in 0...row.len():
                tile = row[x]
                if tile == "#":
                    self.walls.add((x, y), nil)
                elif tile == "E":
                    self.end = (x, y)
                elif tile == "S":
                    self.start = (x, y)

class Node:
    init(maze, pos, dir):
        self.maze = maze
        self.pos = pos
        self.dir = dir

    fn get_neighbors():
        neighbors = []
        neighbors.add(Node(self.maze, self.pos, xform_cw[self.dir]))
        neighbors.add(Node(self.maze, self.pos, xform_ccw[self.dir]))
        adj = move_xforms[self.dir](self.pos)
        if not self.maze.walls.contains(adj):
            neighbors.add(Node(self.maze, move_xforms[self.dir](self.pos), self.dir))
        return neighbors

    fn dist(neighbor):
        if self.dir != neighbor.dir:
            return 1000
        else:
            return 1

    fn key():
        # Instances aren't hashable (yet).
        return (self.pos, self.dir)

fn find_best_end(maze, result):
    best_dist = nil
    best_end_key = nil
    for dir in 0...4:
        end_key = (maze.end, dir)
        if not result.prev.contains(end_key):
            continue
        end_dist = result.dist[end_key]
        if best_dist == nil or end_dist < best_dist:
            best_dist = end_dist
            best_end_key = end_key
    return best_end_key

export fn part1(input):
    maze = Maze(input)
    src = Node(maze, maze.start, 0)
    result = bfs(src)
    return result.dist[find_best_end(maze, result)]

export fn part2(input):
    maze = Maze(input)
    src = Node(maze, maze.start, 0)
    result = bfs(src)
    best_end_key = find_best_end(maze, result)
    tiles = {}
    stack = [best_end_key]
    while stack.num() > 0:
        node = stack.pop()
        tiles.add(node[0], nil)
        if not result.prev.contains(node):
            continue
        for prev in result.prev[node]:
            stack.add(prev)
    return tiles.num()

if is_main():
    aoc.solve(16, part1, part2)
