import aoc

class Computer:
    init(memory, cond_enabled):
        self.memory = memory
        self.at = 0
        self.cond_enabled = cond_enabled
        self.product = nil

    fn accept(seq):
        for i in 0...seq.len():
            at = self.at + i
            if at >= self.memory.len():
                return false
            if self.memory[at] != seq[i]:
                return false
        self.at += seq.len()
        return true

    fn number():
        fn is_digit(c):
            return c >= "0" and c <= "9"
        at = self.at
        start = at
        while at < self.memory.len() and is_digit(self.memory[at]):
            at += 1
        n = at - start
        if n < 1 or n > 3: return nil
        self.at += n
        return int(self.memory[start...at])

    fn mul():
        left = self.number()
        if left == nil:
            return false
        if not self.accept(","):
            return false
        right = self.number()
        if right == nil:
            return false
        if not self.accept(")"):
            return false
        self.product = left * right
        return true

    fn next():
        while self.at < self.memory.len():
            if self.accept("mul("):
                start = self.at
                if not self.mul():
                    self.at = start
                    continue
                return self.product
            elif self.cond_enabled and self.accept("do()"):
                return true
            elif self.cond_enabled and self.accept("don't()"):
                return false
            else:
                self.at += 1
        return nil

    fn execute():
        sum = 0
        token = self.next()
        enabled = true
        while token != nil:
            if token == true:
                enabled = true
            elif token == false:
                enabled = false
            elif enabled:
                sum += token
            token = self.next()
        return sum

export fn part1(input):
    return Computer(input, false).execute()

export fn part2(input):
    return Computer(input, true).execute()

aoc.solve(3, part1, part2)
