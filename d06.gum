import aoc

fn step_north(pos):
    return (pos[0], pos[1] - 1)

fn step_east(pos):
    return (pos[0] + 1, pos[1])

fn step_south(pos):
    return (pos[0], pos[1] + 1)

fn step_west(pos):
    return (pos[0] - 1, pos[1])

steps = [step_north, step_east, step_south, step_west]
rot90 = [1, 2, 3, 0]

class Map:
    init(input):
        rows = input.split("\r\n")
        self.obstacles = {}
        for y in 0...rows.num():
            row = rows[y]
            for x in 0...row.len():
                if row[x] == "#":
                    self.obstacles.add((x, y), nil)
                elif row[x] == "^":
                    self.start = (x, y)
        self.width = rows[0].len()
        self.height = rows.num()

    fn is_obstacle(pos):
        return pos in self.obstacles

    fn is_outside(pos):
        x = pos[0]
        y = pos[1]
        return x < 0 or x >= self.width or y < 0 or y >= self.height

fn patrol(map, pos, dir, callback):
    while true:
        next = steps[dir](pos)
        if next in map.obstacles:
            dir = rot90[dir]
        else:
            if not callback(pos, dir):
                break
            if map.is_outside(next):
                break
            else:
                pos = next

export fn part1(input):
    map = Map(input)
    visited = {}
    fn visit(pos, dir):
        visited.add(pos, nil)
        return true
    patrol(map, map.start, 0, visit)
    return visited.num()

export fn part2(input):
    map = Map(input)

    # Patrol the original route, recording each node visited and the direction
    # when exiting that node.
    path = []
    dirs = []
    fn visit(pos, dir):
        path.add(pos)
        dirs.add(dir)
        return true
    patrol(map, map.start, 0, visit)

    # For each node in the original route, except the start, insert an obstacle
    # and see if it would generate a loop.
    num_loops = 0
    tested = {}
    for i in 1...path.num():
        obstacle = path[i]
        if obstacle in tested:
            continue
        tested.add(obstacle, nil)
        start = path[i-1]
        dir = rot90[dirs[i-1]]
        map.obstacles.add(obstacle, nil)
        visited = {}
        fn visit(pos, dir):
            if (pos, dir) in visited:
                num_loops += 1
                return false
            visited.add((pos, dir), nil)
            return true
        patrol(map, start, dir, visit)
        map.obstacles.remove(obstacle)

    return num_loops

if is_main():
    aoc.solve(6, part1, part2)
