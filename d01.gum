import aoc
import math
import sort for sort

fn parse(input):
    left = []
    right = []
    lines = input.split("\r\n")
    for line in lines:
        ids = line.split("   ")
        left.add(int(ids[0]))
        right.add(int(ids[1]))
    return left, right

export fn part1(input):
    lists = parse(input)
    left = lists[0]
    right = lists[1]

    sort(left)
    sort(right)

    total_distance = 0
    for i in 0...left.num():
        total_distance += math.abs(left[i] - right[i])

    return total_distance

export fn part2(input):
    lists = parse(input)
    left = lists[0]
    right = lists[1]

    counts = {}
    for n in right:
        if n in counts:
            counts[n] += 1
        else:
            counts[n] = 1

    similarity_score = 0
    for n in left:
        if n in counts:
            similarity_score += n * counts[n]

    return similarity_score

if is_main():
    aoc.solve(1, part1, part2)
