import aoc
import math
import random

class Computer:
    init(input):
        fn post_colon(input):
            return input.split(": ")[1]
        lines = input.split("\r\n")
        self.ra = int(post_colon(lines[0]))
        self.rb = int(post_colon(lines[1]))
        self.rc = int(post_colon(lines[2]))
        self.prog = []
        for x in post_colon(lines[4]).split(","):
            self.prog.add(int(x))

    fn execute(ra_override):
        ip = 0
        out = []
        ra = self.ra
        if ra_override != nil:
            ra = ra_override
        rb = self.rb
        rc = self.rc

        fn ins_adv(opr):
            ra = math.trunc(ra / math.pow(2, opr))
        fn ins_bxl(opr):
            rb = math.xor(rb, opr)
        fn ins_bst(opr):
            rb = math.mod(opr, 8)
        fn ins_jnz(opr):
            if ra != 0: ip = opr - 2
        fn ins_bxc(opr):
            rb = math.xor(rb, rc)
        fn ins_out(opr):
            out.add(math.mod(opr, 8))
        fn ins_bdv(opr):
            rb = math.trunc(ra / math.pow(2, opr))
        fn ins_cdv(opr):
            rc = math.trunc(ra / math.pow(2, opr))

        instrs = [
            ins_adv, ins_bxl, ins_bst, ins_jnz,
            ins_bxc, ins_out, ins_bdv, ins_cdv
        ]

        fn opr_0():
            return 0
        fn opr_1():
            return 1
        fn opr_2():
            return 2
        fn opr_3():
            return 3
        fn opr_a():
            return ra
        fn opr_b():
            return rb
        fn opr_c():
            return rc

        operands = [
            opr_0, opr_1, opr_2, opr_3,
            opr_a, opr_b, opr_c, nil
        ]

        while ip < self.prog.num():
            ins = instrs[self.prog[ip]]
            opr = operands[self.prog[ip + 1]]
            ins(opr())
            ip += 2

        return out

export fn part1(input):
    fn add_commas(out):
        for i in 0...out.num():
            out[i] = "{out[i]}"
        return ",".join(out)
    return add_commas(Computer(input).execute(nil))

export fn part2(input):
    comp = Computer(input)

    # Increment mismatched octal digits until the result matches the program.
    fn oct_to_dec(oct):
        dec = 0
        for d in oct:
            dec = dec * 8 + d
        return dec
    
    oct = []
    for i in 0...comp.prog.num():
        oct.add(0)
    oct[0] = 1

    out = comp.execute(oct_to_dec(oct))
    k = 0
    target = comp.prog
    n = target.num()
    while comp.prog != out:
        i = n - 1
        while comp.prog[i] == out[i]:
            i -= 1
        oct[n - i - 1] += 1
        out = comp.execute(oct_to_dec(oct))
    
    return oct_to_dec(oct)

if is_main():
    aoc.solve(17, part1, part2)
