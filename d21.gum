import aoc
import pathfind for dijkstra

# Note: No symbol() function exists yet in the core library!
string_to_symbol = {
    "0": '0', "1": '1', "2": '2', "3": '3', "4": '4',
    "5": '5', "6": '6', "7": '7', "8": '8', "9": '9',
    "A": 'A', ">": '>', "v": 'v', "<": '<', "^": '^'
}

num_keypad = "789\n456\n123\n.0A"
dir_keypad = ".^A\n<v>"

fn move_right(pos):
    return (pos[0] + 1, pos[1])

fn move_down(pos):
    return (pos[0], pos[1] + 1)

fn move_left(pos):
    return (pos[0] - 1, pos[1])

fn move_up(pos):
    return (pos[0], pos[1] - 1)

fn expand_keypad(keypad):
    rows = keypad.split("\n")
    positions = {}
    for y in 0...rows.num():
        row = rows[y]
        for x in 0...row.len():
            key = row[x]
            if key == ".": continue
            positions.add((x, y), string_to_symbol[row[x]])
    expanded = {}
    fn add_if_valid(pos, key, dir):
        if pos in positions:
            expanded.add((key, dir), positions[pos])
    for pos in positions:
        key = positions[pos]
        add_if_valid(move_right(pos), key, '>')
        add_if_valid(move_down(pos), key, 'v')
        add_if_valid(move_left(pos), key, '<')
        add_if_valid(move_up(pos), key, '^')
    return expanded

num_keypad = expand_keypad(num_keypad)
dir_keypad = expand_keypad(dir_keypad)

keypad_dist_cache = {}

fn keypad_dist(keypad, start, end, depth):
    cache_key = (start, end, depth)
    if cache_key in keypad_dist_cache:
        return keypad_dist_cache[cache_key]

    class Node:
        init(outer, inner, output):
            self.outer = outer
            self.inner = inner
            self.output = output

        fn get_neighbors():
            neighbors = []

            fn add_neighbor_dir(key):
                pair = (self.inner, key)
                if pair in keypad:
                    neighbors.add(Node(key, keypad[pair], nil))

            add_neighbor_dir('>')
            add_neighbor_dir('v')
            add_neighbor_dir('<')
            add_neighbor_dir('^')
            neighbors.add(Node('A', self.inner, self.inner))

            return neighbors

        fn dist(neighbor):
            if depth > 0:
               return keypad_dist(dir_keypad, self.outer, neighbor.outer, depth - 1)
            else:
               return 1

        fn key():
            return (self.outer, self.inner, self.output)

    fn goal(node):
        return node.output == end

    dist = dijkstra(Node('A', start, nil), goal)
    keypad_dist_cache.add(cache_key, dist)
    return dist

fn find_shortest_length(code, depth):
    length = 0
    prev = 'A'
    for c in code:
        key = string_to_symbol[c]
        length += keypad_dist(num_keypad, prev, key, depth)
        prev = key
    return length

export fn solve(input, depth):
    sum = 0
    for code in input.split("\r\n"):
        length = find_shortest_length(code, depth)
        numeric = int(code[0...(code.len()-1)])
        sum += length * numeric
    return sum

export fn part1(input):
    return solve(input, 2)

export fn part2(input):
    return solve(input, 25)

if is_main():
    aoc.solve(21, part1, part2)
