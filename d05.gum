import aoc
import math

class Result:
    init(correct, incorrect):
        self.correct = correct
        self.incorrect = incorrect

fn parse_rules(input):
    rules = {}
    for line in input.split("\r\n"):
        pages = line.split("|")
        before = int(pages[0])
        after = int(pages[1])
        if after in rules:
            rules[after].add(before, nil)
        else:
            rules[after] = {before: nil}
    return rules

fn parse_updates(input):
    updates = []
    for line in input.split("\r\n"):
        update = []
        for page in line.split(","):
            update.add(int(page))
        updates.add(update)
    return updates

fn middle(pages):
    return pages[math.trunc(pages.num()/2)]

fn order_update(rules, update):
    ordered = []
    for i in 0...update.num():
        ordered.add(nil)
    for page in update:
        num_before = 0
        if page in rules:
            before = rules[page]
            for other in update:
                if other in before:
                    num_before += 1
        ordered[num_before] = page
    return ordered

fn process(input):
    parts = input.split("\r\n\r\n")
    rules = parse_rules(parts[0])
    updates = parse_updates(parts[1])
    correct = 0
    incorrect = 0
    for update in updates:
        ordered_update = order_update(rules, update)
        if update == ordered_update:
            correct += middle(update)
        else:
            incorrect += middle(ordered_update)
    return Result(correct, incorrect)

export fn part1(input):
    return process(input).correct

export fn part2(input):
    return process(input).incorrect

if is_main():
    aoc.solve(5, part1, part2)
