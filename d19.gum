import aoc

fn num_possible(cache, design, patterns):
    if design.len() == 0:
        return 1
    if design in cache:
        return cache[design]
    fn save(result):
        cache[design] = result
        return result
    num = 0
    for pattern in patterns:
        if design.starts_with(pattern):
            subdesign = design[pattern.len()...design.len()]
            num += num_possible(cache, subdesign, patterns)
    return save(num)

fn solve(input, pred):
    lines = input.split("\r\n")
    patterns = lines[0].split(", ")
    designs = lines[2...lines.num()]
    possible = 0
    for design in designs:
        possible += pred(num_possible({}, design, patterns))
    return possible

export fn part1(input):
    fn pred(n): return int(n > 0)
    return solve(input, pred)

export fn part2(input):
    fn pred(n): return n
    return solve(input, pred)

if is_main():
    aoc.solve(19, part1, part2)
