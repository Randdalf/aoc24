import aoc

class Equation:
    init(input):
        parts = input.split(": ")
        self.value = int(parts[0])
        self.numbers = []
        for x in parts[1].split(" "):
            self.numbers.add(int(x))

fn parse(input):
    equations = []
    for line in input.split("\r\n"):
        equations.add(Equation(line))
    return equations

fn concat(a, b):
    return int("{a}{b}")

fn search(equation, i, scratch, allow_concat):
    if scratch > equation.value:
        return false
    if i >= equation.numbers.num():
        return scratch == equation.value
    if allow_concat and search(equation, i+1, concat(scratch, equation.numbers[i]), true):
        return true
    if search(equation, i+1, scratch + equation.numbers[i], allow_concat):
        return true
    return search(equation, i+1, scratch * equation.numbers[i], allow_concat)

fn solve(input, allow_concat):
    equations = parse(input)
    sum = 0
    for equation in equations:
        if search(equation, 1, equation.numbers[0], allow_concat):
            sum += equation.value
    return sum

export fn part1(input):
    return solve(input, false)

export fn part2(input):
    return solve(input, true)

if is_main():
    aoc.solve(7, part1, part2)
